<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta lang="zh-hant">
<meta name="description" content="輸入音符標記與和弦，按下撥放立即試聽。" />
<meta name="author" content="xNedKx" />
<meta name="copyright" content="xNedKx" />
<title>簡譜播放機 Beta</title>
<style>
document, body {
  margin: 0;
}
body {
  font-family: "PT Sans Narrow", "Meiryo", "MS PGothic", "Apple LiGothic", "文泉驛正黑體", "SimHei", "Microsoft YaHei", "Microsoft JhengHei";
  overflow-x: hidden;
}
#title {
  text-align: center;
  font-size: 24px;
  margin: 0.5em auto;
}
#help {
  font-size: 0.6em;
  color: #999;
  text-align: center;
  overflow-x: auto;
  max-width: 100%;
  margin: 0 0.5em;
  box-sizing: border-box;
}
#input, #controls {
  margin: 1em auto;
  width: 80%;
  min-width: 320px;
  box-sizing: border-box;
}
#input {
  display: block;
  min-height: 100px;
  resize: vertical;
}
#controls {
  text-align: center;
}
#speed, #volume {
  width: 3em;
  margin-right: 1em; 
}
@media screen and (max-width: 640px){
  #help {
    white-space: normal;
    text-align: left;
  }
}
</style>
</head>
<body>
<h1 id="title">簡譜播放機 Beta</h1>
<pre id="help">使用說明：
輸入 [ 1 2 3 4 5 6 7 ] 以及 [ C D E F G A B ] 作為音符，
以 [ - ] 增加音符長度， [ 0 ] 跟 [ R ] 為休止符。
在音符前使用 [ # ] 跟 [ ! ] 可以升或降半音，
在升降記號或音符前使用 [ ^ ] 與 [ _ ] 可以上下移動一個八度，
可以連續使用多個記號以移動更多八度。
在音符前用 [ ( ] 和 [ ) ] 可以附加和絃，
請在括號中使用和弦記號，如 [ (Cm) ] 、 [ (Gsus4) ] 、 [ (D7) ] 等。
和弦會持續到下個和弦記號，如果要終止，可以使用 [ (0) ] 或是 [ (R) ] 。
和弦音高低於音符預設音高一個八度。
小節線符號 [ | ] 可用於排版，不影響簡譜解析。
<br>範例: 綠袖子 [速度: 300]<br>
_6-|(Am)1---2-|(C)3-- #43-|(G)2--- _7-|(Em)_5-- _6_7-|(Am)1---  _6-|(Dm)_6-- _#5 _6-|(E) _7---  _#5-|_3---  
_A-|(Am)C---D-|(C)E-- #FE-|(G)D--- _B-|(Em)_G-- _A_B-|(Am)C-- _B_A-|(E)_#G-- _#F_#G-|(Am)_A-----    |_A-----
   |(C) 5-----|   5-- #43-|(G)2--- _7-|(Em)_5-- _6_7-|(Am)1---  _6-|(Dm)_6-- _#5 _6-|(E) _7---  _#5-|_3-----
   |(C) G-----|   G-- #FE-|(G)D--- _B-|(Em)_G-- _A_B-|(Am)C-- _B_A-|(E)_#G-- _#F_#G-|(Am)_A-----    |_A-----

</pre>
<textarea id="input" disabled>瀏覽器不支援，無法正常啟動。</textarea>
<div id="controls">
<label>速度: <input id="speed" value="300" disabled></label>
<label>音量: <input id="volume" value="50" disabled></label>
<button id="play" disabled>播放</button>
<button id="mute" disabled>靜音</button>
</div>
<script>
window.addEventListener( "DOMContentLoaded", function(){
  
  if(window.hasOwnProperty("AudioContext")){
    document.getElementById("input").value = "";
    document.getElementById("input").disabled = false;
    document.getElementById("play").disabled = false;
    document.getElementById("mute").disabled = false;
    document.getElementById("speed").disabled = false;
    document.getElementById("volume").disabled = false;
  }
  
  let logFlag = false
  function log(...args){
    return logFlag && console.log(...args)
  }
  
  function getFrequency(pitch){
    pitch = isFinite(pitch)? pitch : defaultPitch;
    return Math.pow(2, (+pitch - 57) / 12) * 440; // you can use 69 instead of 57 for classic condition
  }
  
  function getNote(pitch){
    var pitches = ["C", "#C", "D", "#D", "E", "F", "#F", "G", "#G", "A", "#A", "B"];
    return [pitches[+pitch % 12], Math.floor((+pitch - 48) / 12)];
  }
  
  function getPitch(note, level){
    return (+note) + (+level) * 12;
  }
  
  var defaultVolume = 1;
  var optputVolume = 0.5;
  var defualtNoteLength = 1;
  var defaultPitch = 48;
  
  var defaultOscillatorType = "sine";
  
  var ac = new AudioContext();
  var oscillatorNumbers = 5;
  var oscillators = [];
  var bqFilter = ac.createBiquadFilter();
  var volumeGain = ac.createGain();
  volumeGain.gain.value = optputVolume;
  bqFilter.connect(volumeGain);
  volumeGain.connect(ac.destination);
  function createOscillator(){
    var oi = oscillators.length;
    oscillators.push({
      id: oi,
      oscillator: ac.createOscillator(),
      gainNode: ac.createGain(),
      playingNote: null
    });
    oscillators[oi].oscillator.type = defaultOscillatorType;
    oscillators[oi].oscillator.frequency.value = getFrequency(defaultPitch);
    oscillators[oi].oscillator.connect(oscillators[oi].gainNode);
    oscillators[oi].gainNode.connect(bqFilter);
    oscillators[oi].gainNode.gain.value = 0;
    oscillators[oi].oscillator.start();
    return oscillators[oi];
  }
  createOscillator();
  
  function getAvailableOscillatorIndex(){
    for( var i in oscillators ){
      if(!oscillators[i].playingNote){
        return i;
      }
    }
    return -1;
  }
  
  var playManager = {
  
    playingQue: [], // {oscillator, timing, note}
    
    addToPlay: function(note, timing, current){ // note: {pitch, period, volume}
      
      if(isFinite(note)){
        note = {pitch: +note};
      }else if( typeof note != "object" || !(note.hasOwnProperty("pitch") || note.hasOwnProperty("period") || note.hasOwnProperty("volume")) ){
        log("[error]", "No notes could be added.");
        return;
      }
      
      var time = isFinite(timing)? timing * division * tick : 0;
      current = isFinite(current)? current : ac.currentTime * 1000;
      var start = Math.ceil( current / tick ) * tick + time;
      
      playManager.playingQue.push({
        addTime: current,
        note: note,
        startTime: start,
        endTime: start + (note.period || defualtNoteLength) * division * tick - Math.min(note.period * division * tick / 20, Math.max(2 * tick, 50)),
        status: "prepare",
        audioNode: null
      });
      
      log("[add]", playManager.playingQue[playManager.playingQue.length - 1]);
      
    }
    
  };
  
  var division = 64;
  var maxCount = 1024;
  var speed = 300;
  var minSpeed = 1;
  var maxSpeed = 1000 * division;
  var tick = 1000 * 60 / speed / division;
  
  function config(conf){
    division = isFinite(conf.maxDivide) ? Math.min(Math.max(Math.round(conf.maxDivide), 1), maxCount) : division;
    speed = isFinite(conf.speed) ? Math.min(Math.max(Math.round(conf.speed), minSpeed), maxSpeed) : speed;
    tick = 1000 * 60 / speed / division;
    optputVolume = isFinite(conf.volume)? conf.volume : optputVolume;
    volumeGain.gain.value = optputVolume;
    if(/(?:sine|square|triangle|sawtooth)/.test(conf.oscillatorType)){
      for(var i in oscillators){
        oscillators[i].oscillator.type = conf.oscillatorType;
      }
    }
  }
  
  var ts = 0;
  function runPlay(ms){
  
    if(ms - ts >= tick){
    
      var intervalCount = Math.floor((ms - ts) / tick);
      ts += intervalCount * tick;
      var time = ac.currentTime * 1000;
      
      for( var i in playManager.playingQue){
      
        var playing = playManager.playingQue[i];
        
        if(playing.status == "playing" && time >= playing.endTime){
        
          playing.status = "end";
          playing.audioNode.oscillator.frequency.value = getFrequency();
          playing.audioNode.gainNode.gain.value = 0;
          playing.audioNode.playingNote = null;
          log("[end]", ts);
          
        }else if(playing.status == "prepare" && time >= playing.startTime - tick * 2 && time <= playing.startTime){
        
          var osci = getAvailableOscillatorIndex();
          if(osci == -1){
            createOscillator();
            osci = oscillators.length - 1;
          }
          oscillators[osci].oscillator.frequency.value = getFrequency(playing.note.pitch);
          log("Frequency:", oscillators[osci].oscillator.frequency.value, "Pitch:", getNote(playing.note.pitch).join(""));
          playing.audioNode = oscillators[osci];
          playing.audioNode.playingNote = playing.note;
          playing.status = "ready";
          
        }else if(time >= playing.startTime && time < playing.endTime){
        
          if(playing.status == "prepare"){
          
            var osci = getAvailableOscillatorIndex();
            if(osci == -1){
              createOscillator();
              osci = oscillators.length - 1;
            }
            oscillators[osci].oscillator.frequency.value = getFrequency(playing.note.pitch);
            log("Frequency:", oscillators[osci].oscillator.frequency.value, "Pitch:", getNote(playing.note.pitch).join(""));
            playing.audioNode = oscillators[osci];
            playing.audioNode.playingNote = playing.note;
            playing.status = "ready";
            
          }
          
          if(playing.status == "ready"){
          
            playing.audioNode.gainNode.gain.value = playing.note.volume || defaultVolume;
            playing.status = "playing";
            log("[playing]", playing.audioNode.id, ts, playing.note.pitch);
            
          }
          
        } // end if: status check
        
      } // end for
      
      playManager.playingQue = playManager.playingQue.filter(function(playing){
        switch(playing.status){
        case "end":
          return false;
        default:
          return true;
        }
      });
      
    }
    
    requestAnimationFrame(runPlay);
    
  }
  
  var playHandler;
  function startPlay(){
    if(!playHandler){
      playHandler = requestAnimationFrame(runPlay);
    }
  }
  
  var muted = false;
  function mute(){
    if(!muted){
      optputVolume = volumeGain.gain.value;
      volumeGain.gain.value = 0;
      muted = true;
    }
  }
  function unmute(){
    if(muted){
      volumeGain.gain.value = optputVolume;
      muted = false;
    }
  }
  
  function toggleMute(e){
    if(muted){
      unmute();
      this.innerText = "靜音";
    }else{
      mute();
      this.innerText = "取消靜音";
    }
  }
  
  function detune(cent){
    bqFilter.detune.value = isFinite(cent)? cent : 0;
  }
  
  window.me = {
    add: function(pitch, period, time, volume){
      playManager.addToPlay({
        pitch: pitch,
        period: period,
        volume: volume
      }, time);
    },
    manager: playManager,
    nodes: oscillators,
    mute: mute,
    unmute: unmute,
    detuneByCent: function(cent){
      detune(cent);
    },
    detune: function(pd){
      detune(pd * 100);
    },
    config: config
  };
  
  startPlay();
  
  function batchAdd(data){
    var time = ac.currentTime * 1000 + 200;
    var note, period = 0;
    for( var i in data ){
      note = data[i];
      if(note.pitch != -1){
        playManager.addToPlay({
          pitch: note.pitch + (note.level + 4) * 12 + note.detune,
          period: note.period,
          volume: note.volume
        }, note.delay, time);
      }
      period = Math.max(period, note.delay + note.period);
    }
    return period;
  }
  
  function textTidy(text){
    return text.replace(/[^01234567RCDEFGABrabcdefg^_\-#!|\n\r()suimjnM9\/ ]/g, "");
  }

  function createNote(pitch, level, detune, period, delay, volume){
    return {
      pitch: isFinite(pitch)? +pitch : -1,
      level: isFinite(level)? +level : 0,
      detune: isFinite(detune)? +detune : 0,
      period: isFinite(period)? +period : 1,
      delay: isFinite(delay)? +delay : 0,
      volume: isFinite(volume)? +volume : 1
    };
  }
  function parseChord(str){
    var output = {
      key: -1,
      param: null,
      root: -1,
      length: 0
    };
    var match = str.match(/^([0R]|[ABCDEFGabcdefg][#!]?)(|M[79]?|m7?|\+|\-|aug|dim|min|maj7?|[0679]|11|13|69|sus[24]|add[29])(|\/[ABCDEFGabcdefg][#!])$/);
    if(match){
      //console.log(match);
      output.key = parseChord.chordKeys[match[1].toUpperCase()];
      output.param = parseChord.chordParams[match[2]];
      if(output.key != -1 && output.param != null){
        if(match[3] != ""){
          output.root = parseChord.chordKeys[match[3].slice(1).toUpperCase()];
        }else{
          output.root = output.key;
        }
        return output;
      }
    }
  }
  parseChord.chordKeys = {
    "B#": 0, "C":  0,
    "C#": 1, "D!": 1,
    "D":  2,
    "D#": 3, "E!": 3,
    "E":  4, "F!": 4,
    "F":  5,
    "F#": 6, "G!": 6,
    "G":  7,
    "G#": 8, "A!": 8,
    "A":  9,
    "A#": 10, "B!": 10,
    "B":  11,
    "0": -1, "R": -1
  };
  parseChord.chordParams = {
    "": [0, 4, 7],
    "M": [0, 4, 7],
    "m": [0, 3, 7],
    "-": [0, 3, 7],
    "min": [0, 3, 7],
    "aug": [0, 4, 8],
    "+": [0, 4, 8],
    "dim": [0, 3, 6],
    "0": [0, 3, 6],
    "6": [0, 4, 7, 9],
    "7": [0, 4, 7, 10],
    "m7": [0, 3, 7, 11],
    "M7": [0, 4, 7, 11],
    "maj7": [0, 4, 7, 11],
    "9": [0, 4, 7, 10, 14],
    "M9": [0, 4, 7, 11, 14],
    "69": [0, 4, 7, 9, 14],
    "11": [0, 4, 7, 10, 14, 17],
    "13": [0, 4, 7, 9, 14, 17, 21],
    "sus2": [0, 2, 7],
    "sus4": [0, 5, 7],
    "add2": [0, 2, 4, 7],
    "add9": [0, 4, 7, 14]
  };
  var chordVolume = 0.2;
  var chordLevel = -1;
  function chordToNotes(chord, level, delay){
    var output = [];
    for(var i in chord.param){
      if(chord.key != -1){
        output.push(createNote(chord.key, level, chord.param[i], chord.length, delay, chordVolume));
      }
    }
    return output;
  }
  function parseText(text){
    var output = [], state = "", time = 0, note = createNote(), chordText = "", chord, chordStart;
    // state: "", "level", "detune", "pitch", "period"
    for(var i = 0; i < text.length; i++){
      //console.log(text[i], note);
      if(state == "chord"){
        if(text[i] != ")"){
          chordText += text[i];
          continue;
        }else{
          //console.log("chord block end");
          //console.log(chordText)
          chord = parseChord(chordText? chordText : "R");
          chordStart = time;
          chordText = "";
          state = "";
          //console.log(chord, chordStart);
        }
      }
      switch(text[i]){
      case "(":
        switch(state){
        case "pitch":
        case "period":
          note.delay = time;
          output.push(note);
          time += note.period;
          //console.log("push last", note);
          //console.log(note.level);
        case "":
        case "level":
        case "detune":
          note = createNote();
        default:
          //console.log("chord block start");
          if(chord){
            chord.length = time - chordStart;
            output = output.concat(chordToNotes(chord, chordLevel, chordStart));
            //console.log("add chord", chord, chordToNotes(chord, -1, chordStart));
          }
        }
        state = "chord";
      break;
      case "^":
      case "_":
        //console.log("level");
        switch(state){
        case "":
        case "level":
          note.level += text[i] == "^" ? 1 : -1;
          //console.log(note.level);
        break;
        case "pitch":
        case "period":
          note.delay = time;
          output.push(note);
          time += note.period;
          //console.log("push last", note);
          note = createNote();
          note.level = text[i] == "^" ? 1 : -1;
          //console.log(note.level);
        break;
        case "detune":
        default:
          note = createNote();
        break;
        }
        state = "level";
      break;
      case "#":
      case "!":
        //console.log("detune");
        switch(state){
        case "":
        case "level":
        case "detune":
          note.detune += text[i] == "#" ? 1 : -1;
          //console.log(note.detune);
        break;
        case "pitch":
        case "period":
          note.delay = time;
          output.push(note);
          time += note.period;
          //console.log("push last", note);
          note = createNote();
          note.detune = text[i] == "#" ? 1 : -1;
          //console.log(note.detune);
        break;
        default:
          note = createNote();
        break;
        }
        state = "detune";
      break;
      case "0":
      case "R":
      case "r":
      case "1":
      case "C":
      case "c":
      case "2":
      case "D":
      case "d":
      case "3":
      case "E":
      case "e":
      case "4":
      case "F":
      case "f":
      case "5":
      case "G":
      case "g":
      case "6":
      case "A":
      case "a":
      case "7":
      case "B":
      case "b":
        //console.log("pitch");
        switch(state){
        case "":
        case "level":
        case "detune":
          note.pitch = parseText.p[text[i]];
          //console.log(note.pitch);
        break;
        case "pitch":
        case "period":
          note.delay = time;
          output.push(note);
          time += note.period;
          //console.log("push last", note);
          note = createNote();
          note.pitch = parseText.p[text[i]];
          //console.log(note.pitch);
        break;
        default:
          note = createNote();
        break;
        }
        state = "pitch";
      break;
      case "-":
        //console.log("period");
        switch(state){
        case "pitch":
        case "period":
          note.period += 1;
          //console.log(note.period);
        break;
        case "":
        case "level":
        case "detune":
        default:
          note = createNote();
        }
        state = "period";
      break;
      default:
      }
    }
    if(state == "pitch" || state == "period"){
      note.delay = time;
      output.push(note);
      time += note.period;
      if(chord){
        chord.length = time - chordStart;
        output = output.concat(chordToNotes(chord, -1, chordStart));
        //console.log("add chord", chord, chordToNotes(chord, -1, chordStart));
      }
      log("push last", note);
    }
    log(output)
    return output;
  }
  parseText.p = {
    0: -1, "R": -1, "r": -1,
    1:  0, "C":  0, "c":  0,
    2:  2, "D":  2, "d":  2,
    3:  4, "E":  4, "e":  4,
    4:  5, "F":  5, "f":  5,
    5:  7, "G":  7, "g":  7,
    6:  9, "A":  9, "a":  9,
    7: 11, "B": 11, "b": 11
  };
  
  function buttonPlay(e){
    ac.resume().then(()=>{
      var speed = +document.getElementById("speed").value;
      var volume = +document.getElementById("volume").value;
      config({speed: speed, volume: volume / 100});
      var ta = document.getElementById("input");
      var raw = ta.value, tidy = textTidy(raw);
      var parsed = parseText(tidy);
      var period = batchAdd(parsed) * division * tick;
      ta.value = tidy;
      this.disabled = true;
      log(period)
      setTimeout(function(){document.getElementById("play").disabled = false;}, period + 300);
    })
  }
  
  document.getElementById("play").addEventListener("click", buttonPlay);
  document.getElementById("mute").addEventListener("click", toggleMute);
  
})
</script>
</body>
</html>