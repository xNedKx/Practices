<!DOCTYPE html>
<html lang="zh-Hant">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="方劑組成資料庫" />
<meta name="author" content="xNedKx" />
<meta name="copyright" content="xNedKx" />
<meta name="keyword" content="中藥,方劑,資料庫" />
<meta property="og:title" content="TCM 方劑組成資料庫" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://xnedkx.github.io/Practices/tcm-med-db.htm" />
<title>TCM 方劑組成資料庫</title>
<style>
document {
  margin: 0;
}
body{
  overscroll-behavior: contain;
  margin: 0 auto;
  text-align: center;
  transition: all 0.2s ease;
  color: #060606;
  background-color: #fdfdfd;
  overflow-x: hidden;
  font-size: 16px;
  font-family: "微軟正黑體", sans-serif;
  max-width: 720px;
}
#main {
  padding: 4px 0 6px;
  width: 100vw;
  color: #000;
  background-color: #e6e6e6;
  background-image: linear-gradient(300deg, #f0f0f0 -100%, #d0d0d0 300% );
  height: 48px;
  position: fixed;
  top: 0;
  z-index: 100;
  max-width: 720px;
}
#main label {
  font-size: 13px;
  display: inline-block;
}
#order {
  padding: 1px 0;
  height: 23px;
  vertical-align: middle;
}
#search {
  height: 17px;
  width: 210px;
  vertical-align: middle;
  text-indent:2px;
}
#main button {
  height: 25px;
  vertical-align: middle;
}
.abtn {
  cursor: pointer;
  padding: 2px;
  margin: 0 2px;
}
.abtn:hover {
  color: #999;
}
#add {
  display: none;
  height: 0;
  max-width: 720px;
  width: 100vw;
  padding: 2px 0;
  color: #000;
  background-color: #eee;
  position: fixed;
  top: 58px;
  z-index: 50;
}
#add.show {
  display: flex;
  flex-direction: column;
  height: auto;
}
#add label {
  display: flex;
  width: 100vw;
  margin: 2px 0;
  padding: 0 1em;
  box-sizing: border-box;
  font-size: 13px;
  line-height: 26px;
  max-width: 720px;
}
#add input, #add textarea {
  flex: 1;
  font-size: 13px;
}
#add input {
  height: 20px;
  padding-left: 2px;
}
#add #comb {
  resize: none;
  vertical-align: middle;
  padding: 2px 1px 2px 2px;
  height: 50px;
}
#addBtn {
  margin: 0 auto;
  width: 100%;
}
#list {
  list-style: none outside;
  padding: 0;
  margin: 58px auto 0;
  overflow-x: hidden;
  overflow-y: auto;
  text-shadow: 0 0 3px #ddd;
}
.data:first-of-type {
  margin-top: 0;
}
.data {
}
.title {
  font-size: 16px;
  background-color: #f0f0f0;
  min-height: 21px;
  line-height: 21px;
  padding: 2px 0;
  margin: 2px 0;
  background-image: linear-gradient(300deg, #ddd -100%, #fff 300% );
}
.title span {
  display: inline-block;
  height: 21px;
  vertical-align: bottom;
}
.matches {
  font-size: 10px;
  color: #999;
  float: left;
  padding: 0 4px;
}
.title .name, .title .origin {
  font-weight: bold;
}
.title .origin::before{
  content: "〈";
}
.title .origin::after{
  content: "〉";
}
.type {
  color: #666;
}
.title .type::before, .title .type::after {
  content: "-";
}
.comb {
  padding: 8px 0;
  background-color: #fdfdfd;
}
.comb .herb {
  border-radius: 1px;
  padding: 1px 6px 2px;
  margin: 1px 1px;
  display: inline-block;
}
.find .comb {
  color: #aaa;
}
.brief .title {
  cursor: pointer;
}
.brief .title:hover {
  background-color: #f9f9f9;
  background-image: linear-gradient(300deg, #eee -100%, #fff 300% );
}
.brief .data:not(.open) .type, .brief .data:not(.open) .comb {
  display: none;
}
.match {
  background-color: #ffcccc;
  background-image: linear-gradient(300deg, #fcc -100%, #ffc 300% );
  color: #060606;
}
.hide {
  display: none;
}
.mobile {
  display: none;
}
@media only screen and (max-width: 480px) {
  #toggle:hover {
    color: inherit;
  }
}
</style>
</head>
<body>
<!-- search -->
<form id="main">
  <label><input id="search" placeholder="在此搜尋方劑組成資料庫" title="空白分隔要搜尋的項目。用 [ 與 ] 可搜尋方名、 < 與 > 可搜尋出處、 ( 與 ) 可搜尋分類。"></label>
  <label><button id="submit">搜尋</button></label>
  <label><button id="clear">清除</button></label>
  <br>
  <label>排序：<select id="order">
    <option value="name" selected>方名</option>
    <option value="type">分類</option>
    <option value="origin">出處</option>
    <option value="match">符合度</option>
    <option value="match_herb">符合量</option>
  </select></label>
  <label><a id="briefBtn" class="abtn" title="切換資料顯示詳細度">精簡顯示</a></label>
  <label><a id="toggle" class="abtn" title="開關新增方劑分頁">新增方劑</a></label>
</form>
<!-- add -->
<form id="add">
  <label>方名：<input id="name" placeholder="方劑名稱(必要項目)"></label>
  <label>分類：<input id="type" placeholder="方劑類別"></label>
  <label>出處：<input id="origin" placeholder="方劑出處"></label>
  <label>組成：<textarea id="comb" placeholder="藥物組成(必要項目)，請使用空白、換行與逗號分隔各項組成。"></textarea></label>
  <label><button id="addBtn">新增方劑</button></label>
</form>
<!-- list -->
<ul id="list"><li>項目載入中...</li></ul>
<script src="https://www.gstatic.com/firebasejs/5.8.6/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.8.6/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/5.8.6/firebase-database.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyCQwmmEMXBCdMEAkrwiyNVjtITqw9KKyB0",
    authDomain: "tryout-5be99.firebaseapp.com",
    databaseURL: "https://tryout-5be99.firebaseio.com",
    projectId: "tryout-5be99",
    storageBucket: "tryout-5be99.appspot.com",
    messagingSenderId: "491834122190"
  };
  firebase.initializeApp(config);
</script>
<script>
let main_form = document.getElementById("main");
let order_input = document.getElementById("order");
let search_input = document.getElementById("search");
let submit_button = document.getElementById("submit");
let clear_button = document.getElementById("clear");
let toggle_brief = document.getElementById("briefBtn");
let toggle_add = document.getElementById("toggle");
let add_div = document.getElementById("add");
let list = document.getElementById("list");
let name_input = document.getElementById("name");
let type_input = document.getElementById("type");
let comb_input = document.getElementById("comb");
let origin_input = document.getElementById("origin");
let add_button = document.getElementById("addBtn");
class Data{
  constructor (name="",type="",comb="",origin=""){
    this.name = name;
    this.type = type;
    this.comb = comb.split(/[\s,;、，；。]/u).filter(d=>d).sort((a,b)=>a.localeCompare(b,"zh-Hant"));
    this.origin = origin;
    this.time = +new Date();
    this.uid = firebase.auth().currentUser.uid;
    this.like = 0;
    this.hide = 0;
  }
}
firebase.auth().signInAnonymously();
firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL);
let dbRef = firebase.database().ref("db");
let db = [], data = new Map(), hidden = [];
/*dbRef.once("value").then(r=>{
  let kdb = r.val()||{};
  for( let [k,d] of Object.entries(kdb) ){
    d.key = k;
    let n = `${d.name}\n${d.origin}`;
    let dn = data.get(n);
    if(!dn){
      dn = [];
      data.set(n,dn);
    }
    dn.push(d);
    dn.sort((a,b)=>b.time-a.time);
  }
  for( let [n,ds] of data ){
    ds[0].elm = elm(ds[0]);
    db.push(ds[0]);
  }
  console.log("value",kdb);
  refresh();
});*/
dbRef.on("child_added",r=>{
  let d = r.val();
  d.key = r.key;
  let n = `${d.name}\n${d.origin}`;
  let dn = data.get(d.name);
  if(!dn){
    dn = [];
    data.set(n,dn);
  }
  dn.push(d);
  dn.sort((a,b)=>b.time-a.time);
  if(dn[0] == d){
    for( let i in db ){
      if(`${db[i].name}\n${db[i].origin}` == n){
        db.splice(i,1);
        break;
      }
    }
    d.elm = elm(d);
    db.push(d);
  }
  //console.log("data added:",d);
  refresh();
});
dbRef.on("child_changed",r=>{
  let d = r.val();
  d.key = r.key;
  let n = `${d.name}\n${d.origin}`;
  let dn = data.get(d.name);
  for( let i in dn ){
    if(dn[i].key == d.key){
      dn.splice(i,1,d);
      if(i == 0){
        for( let j in db ){
          if(db[j].key == d.key){
            db.splice(i,1,d);
            if(dn.length){
              dn[0].elm = elm(dn[0]);
              db.push(dn[0]);
            }
          }
          break
        }
      }
      break;
    }
  }
  //console.log("data changed:",d);
  refresh();
});
dbRef.on("child_removed",r=>{
  let d = r.val();
  d.key = r.key;
  let n = `${d.name}\n${d.origin}`;
  let dn = data.get(d.name);
  for( let i in dn ){
    if(dn[i].key == d.key){
      dn.splice(i,1);
      if(i == 0){
        for( let j in db ){
          if(db[j].key == d.key){
            db.splice(i,1);
            if(dn.length){
              dn[0].elm = elm(dn[0]);
              db.push(dn[0]);
            }
          }
          break;
        }
      }
      break;
    }
  }
  //console.log("data removed:",d);
  refresh();
});
function add(e){
  e.preventDefault();
  add_button.removeEventListener("click",add);
  if(name_input.value && comb_input.value){
    update( new Data( name_input.value, type_input.value, comb_input.value, origin_input.value ) ).then(r=>{
      add_button.addEventListener("click",add);
      name_input.value = "";
      type_input.value = "";
      comb_input.value = "";
      origin_input.value = "";
      toggle();
    });
  }else{
    add_button.addEventListener("click",add);
  }
}
function update(data){
  if(data){
    if(data.key){
      return deRef.update({[data.key]:data});
    }else{
      let dbPush = dbRef.push();
      return dbPush.set(data);
    }
  }else{
    return Promise.resolve();
  }
}
function sort(){
  //console.log("sort data");
  let sk = order_input.value;
  for( let d of db ){
    d.mh = d.mh || [];
    d.match = d.match || 0;
  }
  switch(sk){
  default:
  case "name":
    db.sort((a,b)=>a.name.localeCompare(b.name,"zh-Hant")||a.type.localeCompare(b.type,"zh-Hant")||b.match-a.match||b.mh.length-a.mh.length);
  break;
  case "type":
    db.sort((a,b)=>a.type.localeCompare(b.type,"zh-Hant")||a.name.localeCompare(b.name,"zh-Hant")||b.match-a.match||b.mh.length-a.mh.length);
  break;
  case "origin":
    db.sort((a,b)=>a.origin.localeCompare(b.origin,"zh-Hant")||a.type.localeCompare(b.type,"zh-Hant")||a.name.localeCompare(b.name,"zh-Hant")||b.match-a.match||b.mh.length-a.mh.length);
  break;
  case "match":
    db.sort((a,b)=>(b.mn+1)*(b.mt+1)*(b.mo+1)*(b.match+1)-(a.mn+1)*(a.mt+1)*(a.mo+1)*(a.match+1)||b.match-a.match||b.mh.length-a.mh.length||a.comb.length-b.comb.length||a.name.localeCompare(b.name,"zh-Hant")||a.type.localeCompare(b.type,"zh-Hant"));
  break;
  case "match_herb":
    db.sort((a,b)=>b.mh.length-a.mh.length||a.comb.length-b.comb.length||a.name.localeCompare(b.name,"zh-Hant")||a.type.localeCompare(b.type,"zh-Hant"));
  break;
  }
}
function refresh(){
  find(kw);
  sort();
  while(list.childNodes.length){
    list.removeChild(list.firstChild);
  }
  for(let d of db ){
    list.appendChild(d.elm);
  }
}
function elm(d){
  let dom = document.createElement("li");
  let title = document.createElement("div");
  let name = document.createElement("span");
  let origin = document.createElement("span");
  let type = document.createElement("span");
  let comb = document.createElement("div");
  let matches = document.createElement("span");
  dom.classList.add("data");
  title.classList.add("title");
  name.classList.add("name");
  type.classList.add("type");
  comb.classList.add("comb");
  origin.classList.add("origin");
  matches.classList.add("matches");
  name.innerText = d.name;
  type.innerText = d.type;
  origin.innerText = d.origin;
  matches.innerText = `0 / ${(d.comb||[]).length} (0%)`;
  dom.appendChild(title);
  title.appendChild(matches);
  title.appendChild(document.createTextNode(" "));
  title.appendChild(name);
  title.appendChild(document.createTextNode(" "));
  title.appendChild(origin);
  title.appendChild(document.createTextNode(" "));
  title.appendChild(type);
  dom.appendChild(comb);
  for( let herb of d.comb ){
    let h = document.createElement("span");
    h.classList.add("herb");
    h.innerText = herb;
    h.dataset.herb = herb;
    comb.appendChild(h);
    comb.appendChild(document.createTextNode(" "));
  }
  title.addEventListener("click",openBrief);
  return dom;
}
function toggle(e){
  e&&e.preventDefault();
  if(add_div.classList.contains("show")){
    add_div.classList.remove("show");
    toggle_add.innerText = "新增方劑";
  }else{
    add_div.classList.add("show");
    toggle_add.innerText = "新增方劑(關閉)";
  }
}
let kw = "";
function search(e){
  e.preventDefault();
  kw = search_input.value;
  refresh();
}
function escape(str){
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
function find(w=""){
  //console.log(`find: ${kw}`);
  if(w){
    list.classList.add("find");
  }else{
    list.classList.remove("find");
  }
  let str = w;
  let name = str.match(/\[(.*?)\]/ug);
  let type = str.match(/\((.*?)\)/ug);
  let origin = str.match(/<(.*?)>|〈(.*?)〉/ug);
  if(name){
    str = str.replace(/\[(.*?)\]/ug,"");
  }
  if(type){
    str = str.replace(/\((.*?)\)/ug,"");
  }
  if(origin){
    str = str.replace(/<(.*?)>|〈(.*?)〉/ug,"");
  }
  let comb = str.split(/[\s,;、，；。]+/u).filter(d=>d).sort((a,b)=>a.localeCompare(b,"zh-Hant"));
  let ms = document.querySelectorAll(".match");
  for( let m of ms ){
    m.classList.remove("match");
  }
  for( let d of db ){
    d.mn = 0;
    d.mt = 0;
    d.mo = 0;
    d.mh = [];
    d.match = 0;
    for( let n of name||[] ){
      if(d.name.match(new RegExp(escape(n.replace(/[\[\]]/ug,"")),"u"))){
        d.mn = 1;
        d.elm.querySelector(".name").classList.add("match");
      }
    }
    for( let t of type||[] ){
      if(d.type.match(new RegExp(escape(t.replace(/[\(\)]/ug,"")),"u"))){
        d.mt = 1;
        d.elm.querySelector(".type").classList.add("match");
      }
    }
    for( let o of origin||[] ){
      if(!d.origin.match(new RegExp(escape(o.replace(/[<>〈〉]/ug,"")),"u"))){
        d.mo = 1;
        d.elm.querySelector(".origin").classList.add("match");
      }
    }
    for( let c of comb||[] ){
      for( let b of d.comb ){
        if(b.match(c)){
          d.mh.push(b);
          d.elm.querySelector(`.herb[data-herb="${b}"]`).classList.add("match");
        }
      }
    }
    d.match = d.mh.length / d.comb.length;
    d.elm.querySelector(".matches").innerText = `${d.mh.length} / ${d.comb.length} (${Math.round(d.match*100)}%)`;
    if(w && !(d.match||d.mn||d.mt||d.mo)){
      d.elm.classList.add("hide");
    }else{
      d.elm.classList.remove("hide");
    }
  }
  return db;
}
function clear(e){
  search_input.value = "";
  name_input.value = "";
  type_input.value = "";
  comb_input.value = "";
  origin_input.value = "";
  kw = "";
  refresh();
}
function briefMode(e){
  let ms = document.querySelectorAll(".open");
  for( let m of ms ){
    m.classList.remove("open");
  }
  if(list.classList.contains("brief")){
    list.classList.remove("brief");
    toggle_brief.innerText = "精簡顯示";
  }else{
    list.classList.add("brief");
    toggle_brief.innerText = "精簡顯示(關閉)";
  }
}
function openBrief(e){
  e.preventDefault();
  if( list.classList.contains("brief") ){
    let p = this.parentNode;
    if( p.classList.contains("open") ){
      p.classList.remove("open");
    }else{
      p.classList.add("open");
    }
  }
}
main_form.addEventListener("submit",search);
submit_button.addEventListener("click",search);
order_input.addEventListener("change",refresh);
clear_button.addEventListener("click",clear);
toggle_brief.addEventListener("click",briefMode);
toggle_add.addEventListener("click",toggle);
add_button.addEventListener("click",add);
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-78696465-1', 'auto');
  ga('send', 'pageview');
</script>
</body>
</html>