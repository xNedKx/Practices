
let wavelength_xyz_1964 = [[0.00016,0.000017,0.000705],[0.000662,0.000072,0.002928],[0.002362,0.000253,0.010482],[0.007242,0.000769,0.032344],[0.01911,0.002004,0.086011],[0.0434,0.004509,0.19712],[0.084736,0.008756,0.389366],[0.140638,0.014456,0.65676],[0.204492,0.021391,0.972542],[0.264737,0.029497,1.2825],[0.314679,0.038676,1.55348],[0.357719,0.049602,1.7985],[0.383734,0.062077,1.96728],[0.386726,0.074704,2.0273],[0.370702,0.089456,1.9948],[0.342957,0.106256,1.9007],[0.302273,0.128201,1.74537],[0.254085,0.152761,1.5549],[0.195618,0.18519,1.31756],[0.132349,0.21994,1.0302],[0.080507,0.253589,0.772125],[0.041072,0.297665,0.57006],[0.016172,0.339133,0.415254],[0.005132,0.395379,0.302356],[0.003816,0.460777,0.218502],[0.015444,0.53136,0.159249],[0.037465,0.606741,0.112044],[0.071358,0.68566,0.082248],[0.117749,0.761757,0.060709],[0.172953,0.82333,0.04305],[0.236491,0.875211,0.030451],[0.304213,0.92381,0.020584],[0.376772,0.961988,0.013676],[0.451584,0.9822,0.007918],[0.529826,0.991761,0.003988],[0.616053,0.99911,0.001091],[0.705224,0.99734,0],[0.793832,0.98238,0],[0.878655,0.955552,0],[0.951162,0.915175,0],[1.01416,0.868934,0],[1.0743,0.825623,0],[1.11852,0.777405,0],[1.1343,0.720353,0],[1.12399,0.658341,0],[1.0891,0.593878,0],[1.03048,0.527963,0],[0.95074,0.461834,0],[0.856297,0.398057,0],[0.75493,0.339554,0],[0.647467,0.283493,0],[0.53511,0.228254,0],[0.431567,0.179828,0],[0.34369,0.140211,0],[0.268329,0.107633,0],[0.2043,0.081187,0],[0.152568,0.060281,0],[0.11221,0.044096,0],[0.081261,0.0318,0],[0.05793,0.022602,0],[0.040851,0.015905,0],[0.028623,0.01113,0],[0.019941,0.007749,0],[0.013842,0.005375,0],[0.009577,0.003718,0],[0.006605,0.002565,0],[0.004553,0.001768,0],[0.003145,0.001222,0],[0.002175,0.000846,0],[0.001506,0.000586,0],[0.001045,0.000407,0],[0.000727,0.000284,0],[0.000508,0.000199,0],[0.000356,0.00014,0],[0.000251,0.000098,0],[0.000178,0.00007,0],[0.000126,0.00005,0],[0.00009,0.000036,0],[0.000065,0.000025,0],[0.000046,0.000018,0],[0.000033,0.000013,0]]
let d65_10_xyz2rgb = [[3.2404542, -1.5371385, -0.4985314],[-0.9692660, 1.8760108, 0.0415560],[0.0556434, -0.2040259, 1.0572252]]
let d65_10_rgb2xyz = [[0.4124564, 0.3575761, 0.1804375],[0.2126729, 0.7151522, 0.0721750],[0.0193339, 0.1191920, 0.9503041]]

function w2xyz(wl,t=wavelength_xyz_1964){
  const b = 380, h = 780, s = 5
  if(!(wl >= b && wl <= h)){ return [0,0,0] }
  let i = Math.floor((wl-b)/s), tail = wl%5
  let xyz = t[i].slice()
  if(tail){
    let n = t[i+1].slice()
    return xyz.map((v,i)=>{
      return v*(s-tail)/s+n[i]*tail/s
    })
  }
  return xyz
}

function xyz2rgb(xyz,m=d65_10_xyz2rgb){
  const [x,y,z] = xyz, [r,g,b] = m
  return [
    Math.min(Math.max(r[0]*x+r[1]*y+r[2]*z,0),1),
    Math.min(Math.max(g[0]*x+g[1]*y+g[2]*z,0),1),
    Math.min(Math.max(b[0]*x+b[1]*y+b[2]*z,0),1)
  ]
}

function rgb2xyz(rgb,m=d65_10_rgb2xyz){
  const [x,y,z] = m, [r,g,b] = rgb
  return [
    x[0]*r+x[1]*g+x[2]*b,
    y[0]*r+y[1]*g+y[2]*b,
    z[0]*r+z[1]*g+z[2]*b
  ]
}

function w2c(wl){
  return xyz2rgb(w2xyz(wl))
}

function r2h(rgb){
  return `#${rgb.map(n=>Math.round(n*255).toString(16).padStart(2,'0')).join('').toUpperCase()}`
}

function estimate(rgb){
  const b = 380, h = 780, s = 5
  let xyz = rgb2xyz(rgb)
  let ds = wavelength_xyz_1964.map((c,i)=>[cd(c,xyz),b+i*s,c])
  let mds = [Infinity,NaN], near = []
  for(let i = 0; i < ds.length; i++){
    const [d,l] = ds[i]
    if(d < mds[0]){
      mds = ds[i]
      let p = ds[i-1]??ds[i]
      let n = ds[i+1]??ds[i]
      if(p[0]<n[0]){
        near = p
      }else{
        near = n
      }
    }
  }
  let dx = near[2][0] - mds[2][0], dy = near[2][1] - mds[2][1], dz = near[2][2] - mds[2][2], dl = mds[0]/(mds[0]+near[0])
  return [mds[1]+dl*(near[1]-mds[1]),[mds[2][0]+dl*dx,mds[2][1]+dl*dy,mds[2][2]+dl*dz]]
}

function cd(a,b){
  let s = 0, d = [], l = Math.max(a.length,b.length)
  for(let i = 0; i < l; i++){
    const v1 = a[i] ?? 0, v2 = b[i] ?? 0
    d[i] = (v1-v2)**2
    s += d[i]
  }
  return s**(1/2)
}

let wl = ["#000000","#000000","#000001","#000001","#000001","#000001","#000001","#000002","#000003","#010003","#010003","#010005","#010006","#010008","#02000A","#020009","#02000D","#030012","#040017","#05001B","#040017","#060022","#08002D","#090037","#0B0042","#090036","#0C004B","#100060","#130075","#17008A","#11006A","#16008D","#1C00B1","#2100D5","#2700F8","#1B00B2","#2200E7","#2A00FF","#3100FF","#3900FF","#2500FF","#2E00FF","#3700FF","#3F00FF","#4800FF","#2C00FF","#3600FF","#3F00FF","#4900FF","#5200FF","#2F00FF","#3900FF","#4200FF","#4C00FF","#5500FF","#3000FF","#3800FF","#4100FF","#4900FF","#5200FF","#2B00FF","#3100FF","#3800FF","#3E00FF","#4500FF","#2100FF","#2400FF","#2800FF","#2B00FF","#2F00FF","#1200FF","#1200FF","#1200FF","#1200FF","#1200FF","#0000FF","#0000FF","#0000FF","#0000FF","#0000FF","#0005FF","#000AFF","#0010FF","#0015FF","#001BFF","#001BFF","#0026FF","#0030FF","#003BFF","#0046FF","#0036FF","#0047FF","#0058FF","#0068FF","#0079FF","#0053FF","#0069FF","#007FFF","#0095FF","#00ABFF","#006EC4","#0089E0","#00A5FC","#00C1FF","#00DCFF","#008A8B","#00AB9E","#00CBB1","#00ECC4","#00FFD6","#00A35F","#00C96B","#00EF77","#00FF83","#00FF8F","#00BF3D","#00EB44","#00FF4B","#00FF52","#00FF59","#00DE23","#00FF26","#00FF29","#00FF2C","#00FF2F","#00FC10","#00FF0F","#00FF0F","#00FF0F","#00FF0F","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#00FF00","#07FF00","#10FF00","#1AFF00","#31FF00","#48FF00","#5FFF00","#77FF00","#8EFF00","#75FF00","#9CFF00","#C2FF00","#E8FF00","#FFFF00","#C0FF00","#F6FF00","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFF000","#FFFF00","#FFFF00","#FFFF00","#FFFF00","#FFCB00","#FFEC00","#FFFF00","#FFFF00","#FFFF00","#FFA500","#FFBF00","#FFD900","#FFF300","#FFFF00","#FF8100","#FF9500","#FFA800","#FFBB00","#FFCE00","#FF5F00","#FF6C00","#FF7900","#FF8600","#FF9300","#FF4000","#FF4800","#FF4F00","#FF5700","#FF5E00","#FF2500","#FF2800","#FF2B00","#FF2E00","#FF3100","#FF0F00","#FF0E00","#FF0E00","#FF0E00","#FF0D00","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#FF0000","#E50000","#FF0000","#FF0000","#FF0000","#FF0000","#B40000","#CF0000","#EA0000","#FF0000","#FF0000","#890000","#9D0000","#B20000","#C60000","#DB0000","#660000","#760000","#850000","#940000","#A30000","#4B0000","#560000","#610000","#6C0000","#770000","#370000","#3E0000","#460000","#4E0000","#560000","#270000","#2D0000","#320000","#380000","#3D0000","#1C0000","#1F0000","#230000","#270000","#2B0000","#130000","#160000","#190000","#1B0000","#1E0000","#0D0000","#0F0000","#110000","#130000","#150000","#090000","#0B0000","#0C0000","#0D0000","#0E0000","#060000","#070000","#080000","#090000","#0A0000","#040000","#050000","#060000","#060000","#070000","#030000","#030000","#040000","#040000","#050000","#020000","#020000","#030000","#030000","#030000","#010000","#020000","#020000","#020000","#020000","#010000","#010000","#010000","#010000","#020000","#010000","#010000","#010000","#010000","#010000","#000000","#010000","#010000","#010000","#010000","#000000","#000000","#000000","#000000","#010000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000"]

function w2f(wl){ // nm => THz f*w = c f(1e12)*w(1e-9) = 3e8
  return 3e5/wl
}

function rgb2w(rgb){
  let [wl,xyz] = estimate(rgb)
  return wl
}

function h2rgb(hex){
  let m = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(hex), r = 0, g = 0, b = 0
  if(m){
    r = parseInt(m[1].repeat(2),16)
    g = parseInt(m[2].repeat(2),16)
    b = parseInt(m[3].repeat(2),16)
  }else{
    m = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(hex)
    if(m){
    r = parseInt(m[1],16)
    g = parseInt(m[2],16)
    b = parseInt(m[3],16)
    }
  }
  return [r/255,g/255,b/255]
}

function wlShift(rs,wl){
  let f = 3e5/wl
  let nf = (1+rs)*f, nw = 3e5/nf
  return nw
}

function colorShift(rs,rgb){
  let wl = rgb2w(rgb)
  let nw = wlShift(rs,wl)
  return w2c(nw)
}

function hcs(rs,hex){
  return r2h(colorShift(rs,h2rgb(hex)))
}


addEventListener("message", function(e){
  let rd = e.data.rd, s = e.data.s
  let nd = new ImageData(400,400)
  for(let i = 0; i < rd.data.length; i += 4){
    if(rd.data[i+3] > 0){
      let [r,g,b] = rd.data.slice(i,i+3)
      let rgb = colorShift(s,[r/255,g/255,b/255])
      nd.data[i] = rgb[0]*255
      nd.data[i+1] = rgb[1]*255
      nd.data[i+2] = rgb[2]*255
      nd.data[i+3] = rd.data[i+3]
    }
  }
  postMessage({sd:nd,s})
}, false)